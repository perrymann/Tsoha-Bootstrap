<?phpclass Kiinteisto extends BaseModel{		public $id, $nimi, $katuosoite, $postinumero, $postitoimipaikka;	public function __construct($attributes){		parent::__construct($attributes);		$this->validators = array('validate_name', 'validate_address', 'validate_zipcode', 'validate_city');	}	// validointi nimi-muuttujaan	public function validate_name(){		$errors = array();		if($this->nimi == '' || $this->nimi == null){			$errors[] = 'Nimi ei saa olla tyhjä!';		}		else if(strlen($this->nimi) < 3){			$errors[] = 'Nimen pituuden tulla vähintään kolme merkkiä!';		}		return $errors;	}	public function validate_address(){		$errors = array();		if($this->katuosoite == '' || $this->katuosoite == null){			$errors[] = 'Katuosoite ei saa olla tyhjä!';		}		else if(strlen($this->katuosoite) < 3){			$errors[] = 'Katuosoitteen pituuden tulla vähintään kolme merkkiä!';		}		return $errors;	}	public function validate_zipcode(){		$errors = array();		if($this->postinumero == '' || $this->postinumero == null){			$errors[] = 'Postinumero on syötettävä!';		}		else if(ctype_digit($this->postinumero) && strlen($this->postinumero) == 5){					} else {			$errors[] = 'Postinumeron pituuden pitää olla viisi numeraalia!';		}		return $errors;	}	public function validate_city(){		$errors = array();		if($this->postitoimipaikka == '' || $this->postitoimipaikka == null){			$errors[] = 'Postitoimipaikka on syötettävä!';		}		else if (strlen($this->postitoimipaikka) < 2){			$errors[] = 'Postitoimipaikan pituus on oltava vähintään kaksi merkkiä';		}		return $errors; 	}		public function save(){		$query = DB::connection()->prepare('INSERT INTO Kiinteisto (nimi, katuosoite, postinumero, postitoimipaikka) VALUES (:nimi, :katuosoite, :postinumero, :postitoimipaikka) RETURNING id');		$query->execute(array('nimi' => $this->nimi, 'katuosoite' => $this->katuosoite, 'postinumero' => $this->postinumero, 'postitoimipaikka' => $this->postitoimipaikka));		$row = $query->fetch();		//Kint::trace();  		//Kint::dump($row);		$this->id = $row['id'];	}	public static function all(){		$query = DB::connection()->prepare('SELECT * FROM Kiinteisto');		$query->execute();		$rows = $query->fetchAll();		$kiinteistot = array();		foreach ($rows as $row) {			$kiinteistot[] = new Kiinteisto(array(				'id' => $row['id'],				'nimi' => $row['nimi'],				'katuosoite' => $row['katuosoite'],				'postinumero' => $row['postinumero'],				'postitoimipaikka' => $row['postitoimipaikka']			));			}		return $kiinteistot;	}	public static function findById($id){		$query = DB::connection()->prepare('SELECT * FROM Kiinteisto WHERE id = :id LIMIT 1'); 		$query->execute(array('id' =>$id));		$row = $query->fetch();				if ($row) {			$haettukiinteisto = new Kiinteisto(array(				'id' => $row['id'],				'nimi' => $row['nimi'],				'katuosoite' => $row['katuosoite'],				'postinumero' => $row['postinumero'],				'postitoimipaikka' => $row['postitoimipaikka']			));				return $haettukiinteisto;		}		return null;  	}  	public static function findByAddress($katuosoite){		$query = DB::connection()->prepare('SELECT * FROM Kiinteisto WHERE katuosoite = :katuosoite'); 		$query->execute();		$rows = $query->fetchAll();		$kiinteistot = array();		foreach ($rows as $row) {			$kiinteistot[] = new Kiinteisto(array(				'id' => $row['id'],				'nimi' => $row['nimi'],				'katuosoite' => $row['katuosoite'],				'postinumero' => $row['postinumero'],				'postitoimipaikka' => $row['postitoimipaikka']			));			}		return $kiinteistot;  	}  	//edit  	public function update(){  		$query = DB::connection()->prepare('UPDATE Kiinteisto SET nimi = :nimi, katuosoite = :katuosoite, postinumero = :postinumero, postitoimipaikka = :postitoimipaikka WHERE id = :id');		$query->execute(array('id' => $this->id, 'nimi' => $this->nimi, 'katuosoite' => $this->katuosoite, 'postinumero' => $this->postinumero, 'postitoimipaikka' => $this->postitoimipaikka));			}	//destroy	public function destroy(){		$query = DB::connection()->prepare('DELETE FROM Kiinteisto WHERE id = :id');		$query->execute(array('id' => $this->id));	}	}